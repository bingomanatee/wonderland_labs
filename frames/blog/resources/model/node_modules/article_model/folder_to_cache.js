var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var _DEBUG = false;
var Gate = require('gate');

var read_file_data = require('./read_file_data');

/* ************************************
 * 
 * ************************************ */

/* ******* CLOSURE ********* */


/**
 * returns an array of complete paths to folders
 *
 * @param root {string} where the files were found
 * @param files [{string}] an array of files or folders in that directory
 * @param callback {function} accepts the file list
 */
function subfolders(root, files, callback){

	var folders = [];
	var gate = Gate.create();

	_.each(files, function (folder) {
		var possible_folder_path = path.resolve(root, folder);
		var l = gate.latch();

		fs.stat(possible_folder_path, function (err, stat) {
			if (stat && stat.isDirectory()) {
				folders.push(possible_folder_path);
			}
			l();
		});
	});

	gate.await(function(){
		callback(null, folders);
	})
}

function set_file_def_to_output(folder, file, out) {
	var root_name = file.replace(/\.json$/, '');
	var file_root = path.resolve(folder, root_name);
	out[file_root] =  {
		file_name: root_name,
		file_root: file_root,
		file_path: file_root + '.md',
		meta_path: path.resolve(folder, file)
	};
	return out;
}


/* ********* EXPORTS ******** */

/**
 *
 * This is a recursive function that attaches file data to a hash
 * whose inedexes are full file paths.
 *
 * @param folder {string} a full path to a real folder
 * @param cache {Object} the object indexed by folder name of the file records.
 * @param done {function}
 *
 */

function read_folder(folder, cache, done) {

	var gate = Gate.create();
	var main_latch = gate.latch();

	fs.readdir(folder, function (err, files) {
		var json_files = _.filter(files, function (file) {
			return /\.json$/i.test(file);
		});

		// extends the cache with local data from the given folder

		cache = _.reduce(json_files, function (out, file) {
			return set_file_def_to_output( folder, file, out);
		}, cache);

		//cull the jsons files from the list of files/folders because they are not folders.

		subfolders(folder, files, function(err, subfolders){
			if (_DEBUG) console.log('subfolder of folder %s: %s', folder, util.inspect(subfolders));

			_.each(subfolders, function(folder_path){
				read_folder(folder_path, cache, gate.latch());
			});
			main_latch();

		})
	});

	gate.await(function(){
		read_file_data(cache, done);
	});
};

module.exports = read_folder;