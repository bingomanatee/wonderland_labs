{
  "name": "scandir",
  "version": "0.0.8",
  "description": "recursive directory scan with filtering features",
  "main": "lib/scandir.js",
  "bin": {
    "scandir": "./bin/scandir"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "pretest": "jsrevival -p \"describe, it\" -o \"properties: false, maxlen: 0, debug: false, bitwise: false, eqeq: false, newcap: false, unparam: false, vars: false, passfail: false\" -r cli-hide-valid -R lib/ test/",
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sdolard/node-scandir.git"
  },
  "keywords": [
    "readdir",
    "recursive"
  ],
  "author": {
    "name": "sdolard@gmail.com"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "gitHead": "93b6c7035fcffaf7cd3473aebb7eaba278bc68f5",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "commander": "1.x.x",
    "mime": "1.2.x"
  },
  "devDependencies": {
    "jsrevival": "0.2.x",
    "mocha": "x.x.x"
  },
  "readme": "node-scandir [![Build Status](https://travis-ci.org/sdolard/node-scandir.png?branch=master)](https://travis-ci.org/sdolard/node-scandir)\nA lib and a cli that returns filepath list contains in dirs\n============\n\n* http://nodejs.org\n\n# Installation with npm\n\n```\n[sudo] npm install [-g] scandir\n```\n\n# Usage\n## CLI\n\n```\n  Usage: scandir [options] <directory>\n\n  Options:\n\n    -h, --help                                  output usage information\n    -V, --version                               output the version number\n    -r, --recursive                             scan dir recursive\n    -w, --wildcard <wildcard>                   wildcard\n    -e, --expression <regexp>                   regular expression\n    -m, --media <media>                         mime type media: application|audio|chemical|image|message|model|text|video|x-conference\n    -i, --insensitive                           case insensitive. Default to false\n    -g, --greaterthan <size[B|kB|MB|GB|TB|EB]>  return files greater than size (Bytes)\n    -l, --lowerthan <size[B|kB|MB|GB|TB|EB]>    return files lower than size (Bytes)\n    -s, --showbrokenlink                        show broken symbolic link\n    -R, --reporter <cli,json>                   default to cli\n    -d, --debug\n    -p, --plugin <plugin name>                  Ex: -p video/vlc-convert\n    -H, --displaypluginoptions                  Ex: -p video/vlc-convert -H\n    -o, --pluginoptions <options>               Ex: -o \"vc: 'VP80',vb: 2000, ab: 44\"\n\n```\n\n\n## LIB\n### ScanDir ctor\n```\n    /**\n    * @class\n    * @public\n    * @params [{Object}] config\n    * @params [{Booleab}] config.debug. Defautl false\n    * @event file({String} filePath, {Stats} stats)\n    * @event end({Number} totalCount, {Number} totalSize}) > scan finished\n    * @event error({Error} err)\n    */\n\n```\n\n### ScanDir.prototype.scan\n```\n    /**\n    * @method\n    * @public\n    * @params <{object}> config\n    * @params <{string}> config.dir\n    * @params [{boolean}]config.recursive. Default to true.\n    * @params [{boolean}]config.insensitive. Default to false. Only available with String filter\n    * @params [{RegExp|String|undefined}] config.filter. String === exact match\n    * @params [{Number}] config.greaterthan. Bytes value\n    * @params [{Number}] config.lowerthan. Bytes value\n    * @params [{boolean}]config.showbrokenlink. Default to false.\n    */\n    ScanDir.prototype.scan\n\n```\n\n### Basic example\n\n```\nvar scandir = require('../lib/scandir').create();\n\nscandir.on('file', function(file, stats) {\n\tconsole.log(file + ' ' +  stats.size);\n});\n\nscandir.on('error', function(err){\n\tconsole.error(err);\n});\n\nscandir.on('end', function(){\n\tconsole.log('Done');\n});\n\nscandir.scan({\n\tdir: '.',\n\trecursive: true,\n\tfilter: /.*/\n});\n\n```\n",
  "_id": "scandir@0.0.8",
  "dist": {
    "shasum": "20251210aa94578c08363458c2c22903aef88075"
  },
  "_from": "scandir@0.0.8"
}
