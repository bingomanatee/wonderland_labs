var _ = require('underscore');
var util = require('util');
var path = require('path');
var fs = require('fs');
var _DEBUG = false;

/* ************************************
 * 
 * ************************************ */

/* ******* CLOSURE ********* */

function Resource_Model_Base() {
	this.items = [];
}

Resource_Model_Base.prototype = {
	add: function (url, context, props) {
		var data = this.find(url, context);
		if (!data) {
			 data = {
				url:     url,
				context: context || ''
			};
		}
		console.log('adding item %s', util.inspect(data));
		this.items.push(data);

		if (props || _.isObject(props)) {
			_.extend(data, props);
		}
	},

	find: function(url, context){
		return _.find(this.items, function(item){
			if (!item.url == url){
				return false;
			}
			if (context && item.context != context){
				return false;
			}

			return true;
		})
	},

	add_items: function(list){
		if (_.isArray(list)){
			_.each(list, function(item){
				var url, context = '', props = {};
				if (_.isString(item)){
					url = item;
				} else {
					url = item.url;
					if (item.context){
						context = item.context;
					}
					if (item.props){
						props = item.props;
					}
				}

				console.log('adding url: %s, context: %s, item: %s', url, context, util.inspect(item));

				if(url){
					this.add(url, context, props);
				}
			}, this);
		} else {
			throw new Error('bad input for base ' + util.inspect(list));
		}
	},

	get_context: function(context){
		console.log('looking for %s in %s', context, util.inspect(this.items));
		var out = _.filter(this.items, function(item){
			return item.context == context;
		})
		var urls = _.pluck(this.items, 'url');

		this.data = _.reject(this.items, function(item){
			return _.contains(urls, item.url);
		});

		return out;
	}
};

/* ********* EXPORTS ******** */

module.exports = Resource_Model_Base;