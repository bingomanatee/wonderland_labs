var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var nuby_factory = require('nuby-factory');
var _DEBUG = false;

/* *************** CLOSURE ******** */

function _info_to_action(action, info) {
    switch (info.method) {
        case '*':
            action.add_get('*/' + info.name, nuby_factory.method_factory.actions('get'));
            action.add_put('*/' + info.name, nuby_factory.method_factory.actions('put'));
            action.add_post('*/' + info.name, nuby_factory.method_factory.actions('post'));
            action.add_delete('*/' + info.name, nuby_factory.method_factory.actions('delete'));
            break;

        /* *********** NOTE *************** *
         NOTE - if we are not adding multiple actions, they all qualify as 'on' methods
         */
        default:
            var get_actions = nuby_factory.method_factory.actions('on');
            if (_DEBUG) console.log('get actions: %s *************', get_actions);
            action.add_on('*/' + info.name, get_actions);
            action.config.method = info.method;
            break;
    }
}

/* *************** MODULE ********* */

module.exports = {
    parse_actions:function (input, n) {
        var out = [];

        for (var i = 1; i <= 4; ++i) {
            var act_name_key = n ? util.format('con_%s_action_%s', n, i) : util.format('action_%s', i);
            var method_key = act_name_key + '_method';
            if (input[act_name_key]) {
                out.push({name:input[act_name_key],
                    method:input[method_key]});
            }
        }
        if (_DEBUG) console.log('found data on controlller %s: %s', n, util.inspect(out));
        return out;
    },

    actions:function (input, root) {
        var actions = module.exports.parse_actions(input);

        return _.map(actions, function(info){
            var action = new nuby_factory.Action({name:info.name, file_path: root});
            _info_to_action(action, info);
            return action;
        });
    },

    controller:function (name, actions, parent) {

        var route_prefix = _.isString(parent) ? util.format('/%s', parent) : util.format("/%s/%s", parent.name, name);
        var params = {name:name, config:{name:name, route_prefix:route_prefix}};
        if (!parent || _.isString(parent)) {
            params.file_path = parent;
            var con = new nuby_factory.Controller(params);
        } else {
            var con = new nuby_factory.Controller(params, parent);
        }

        if (actions) {
            _.each(actions, function (action_info) {
                var action = new nuby_factory.Action({name:action_info.name}, con);
                _info_to_action(action, action_info);

                if (_DEBUG)  console.log(' =============== post action customization ========== %s', util.inspect(action));
            });
        }
        return con;
    }
}