var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var request = require('request');
var DOMAIN = 'http://nodejs.debuggable.com';
var DOMAIN2 = 'http://static.izs.me/irclogs/node.js'
var gate = require('gate');
var path = require('path');
var http = require('http');
var URL = require('url');
var wrench = require('wrench');
var gate = require('gate');

var LOCAL_FILE_ROOT = path.resolve(__dirname + './../../chat_files');
wrench.mkdirSyncRecursive(LOCAL_FILE_ROOT);

function Files_List_File(fi, list) {
    this.file = fi.file;
    this.base = fi.base;
    this.list = list;

}

_.extend(Files_List_File.prototype, {
    url:function () {
        return path.resolve(this.list.domain, this.file);
    },

    local_copy:function () {
        return path.resolve(LOCAL_FILE_ROOT, this.list.dom_host(), this.file);
    },

    toJSON:function () {
        return {
            file:this.file,
            base:this.base,
            domain:this.list.domain,
            host:this.list.dom_url.host,
            size: this.stat.size
        }
    },

    get_stats:function (cb) {
        var self = this;

        fs.stat(this.local_copy(), function(err, stat){
            self.stat = stat;
            cb(err, stat);
        })
    },

    import:function (cb) {
        var self = this;

        var file_path = path.resolve(this.list.dom_url.pathname, this.file);

        var options = {
            host:this.list.dom_host(),
            port:80,
            path:file_path,
            method:'GET'
        };

        var lc = this.local_copy();

        var local_dir = path.dirname(lc);

        wrench.mkdirSyncRecursive(local_dir);

        fs.exists(local_dir, function (e) {
            //  console.log('local_dir %s exists: %s', local_dir, e ? 'y' : 'n');
            if (e) {
                var req = http.request(options, function (res) {
                    //   console.log('STATUS: ' + res.statusCode);
                    //  console.log('HEADERS: ' + JSON.stringify(res.headers));
                    res.setEncoding('utf8');

                    var write_stream = fs.createWriteStream(lc, {
                        flags:'w',
                        encoding:'utf8',
                        mode:0775
                    });

                    res.on('data', function (chunk) {
                        // console.log('BODY: ' + chunk);
                        write_stream.write(chunk);
                    });

                    res.on('end', function () {
                        write_stream.end();
                        write_stream.destroy();
                        //    console.log('done with file %s', options.path);
                        self.get_stats(cb);
                    })

                    res.on('error', function (err) {
                        write_stream.end();
                        write_stream.destroy();
                        cb(err);
                    })

                });

                req.on('error', function (e) {
                    console.log('problem with request: ' + e.message);
                    cb(e);
                });

                req.end();
            } else {
                cb(new Error('cannot create dir ' + local_dir));
            }
        })
    }

})

function Files_List(domain, files) {
    var self = this;
    this.files = _.map(files, function (fi) {
        return new Files_List_File(fi, self);
    })
    this.domain = domain;
    this.dom_url = URL.parse(domain);
}

_.extend(Files_List.prototype, {

    length:function () {
        return this.files.length;
    },

    file_url:function (n) {
        if (n > this.length()) {
            throw new Error('asking for nonexistent file ' + n);
        }

        return this.domain + '/' + this.files[n].file;
    },

    dom_host:function () {
        return this.dom_url.host;
    },

    toJSON:function () {
        return {
            domain:this.domain,
            files:_.map(this.files, function (f) {
                return f.toJSON();
            })
        }
    },

    import_all:function (cb) {
        var self = this;
        var g = gate.create();
        this.files.forEach(function (file) {
            file.import(g.latch(file.file));
        });

        var iai = setInterval(function () {
            console.log('gate count: %s', g.count);
            if (g.count < 1) {
                clearInterval(iai);
            }
        }, 500);

        g.await(cb);
    }
})

function _write_chat_file(data, cb) {
    var dom_root = FILE_ROOT + data.domain.replace('http://', '/');
    console.log('writing chat %s', util.inspect(data));

    function _stream_file() {

        //    console.log('requesting %s', url);
        try {

            var write_file = dom_root + '/' + data.basename + '.txt';

            var options = {
                host:data.dom_url.hostname,
                path:data.hostname.path + '/' + data.basename,
                port:80,
                method:'get'
            };

            console.log('requesting %s for file %s', util.inspect(options), write_file);

            var req = http.request(options, function (res) {
                res.setEncoding('utf8');
                var write_stream = fs.createWriteStream(write_file, {encoding:'utf8', mode:0775});
                write_stream.on('error', function (err) {
                    console.log('write stream err: %s', err.message);
                    cb(write_file);
                })
                res.pipe(write_stream).on('end',function () {
                    cb(write_file);
                }).on('error', function (err) {
                        console.log('err: %s', err.message);
                        cb(write_file);
                    })

            });

            req.on('error', function (e) {
                console.log('problem with request: ' + e.message);
                cb(write_file);
            });

            req.end();
        } catch (err) {
            cb(write_file);
        }
    }

    fs.exists(dom_root, function (e) {
        if (e) {
            //       console.log('dir %s exists', dom_root);
            _stream_file();
        } else {
            //       console.log('dir %s NOT exists', dom_root);
            try {

                fs.mkdir(dom_root, _stream_file)
            } catch (err) {
                // most likely concurrent mkdirs
                _stream_file();
            }
        }
    })
}


function _digest_log_indexes(body, domain, limit) {
    var out = []
    var link_regex = /<a href="(([^"]+).txt)">/g;
    do {
        var match = link_regex.exec(body);
        if (match) {

            //  console.log('match: %s', util.inspect(match[1]));
            out.push({file:match[1], base:match[2]});
            if (!(limit === false)) {
                if (--limit == 0) {
                    break;
                }
            }
        }

    } while (match);
    return out;
}

module.exports = {
    files_at_domain:function (domain, cb, limit) {

        request.get(domain, function (err, res, body) {
                if (err) {
                    console.log(err.message);
                    throw err;
                }
                try {
                    var files = _digest_log_indexes(body, domain, limit ? limit : false);

                    var out = new Files_List(domain, files);

                    cb(null, out);
                } catch (err) {
                    cb(err);
                }
            }
        )

    }

}