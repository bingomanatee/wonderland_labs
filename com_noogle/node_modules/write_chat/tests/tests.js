var tap = require('tap');
var write_chat = require('./../index');
var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var request = require('request');
var DOMAIN_NODEJS_DEBUGGABLE_COM = 'http://nodejs.debuggable.com';
var DOMAIN_STATIC_IS_ME = 'http://static.izs.me/irclogs/node.js'
var path = require('path');
var COM_NOOGLE_ROOT = path.resolve(__dirname, '../../../');
var CHAT_FILE_DIR = path.resolve(COM_NOOGLE_ROOT, 'chat_files');
var wrench = require('wrench');

/**
 * note - these "Tests" run on REAL search datbase!
 * only run BEFORE the app is up!
 */
tap.test('basic indexing', function(t){

    write_chat.files_at_domain(DOMAIN_NODEJS_DEBUGGABLE_COM, function(err, files){
        if (err){
            console.log(util.inspect(err));
           t.end();
           return;
        }
      //  console.log('files: %s', util.inspect(files));
        t.equals(files.files.length, 3, ' 3 files retrieved');
        t.equals(files.dom_url.host, 'nodejs.debuggable.com', 'host detection');
        t.ok(/\.txt$/.test(files.files[0].file), 'FIRST FILE ends in .txt');

        var the_file = files.files[0];
        var test_url = DOMAIN_NODEJS_DEBUGGABLE_COM + '/' + the_file.file;
        var local_file = path.resolve(COM_NOOGLE_ROOT, 'chat_files', 'nodejs.debuggable.com', the_file.file);
        t.equals(files.files[0].local_copy(), local_file, 'local file = ' + local_file);
        t.equals(files.file_url(0), test_url, 'url forming = ' +  test_url);
        t.end();
    }, 3)
});
tap.test('basic indexing 2', function(t){

    write_chat.files_at_domain(DOMAIN_STATIC_IS_ME, function(err, files){
        if (err){
            console.log(util.inspect(err));
           t.end();
           return;
        }
        console.log('files: %s', util.inspect(files));
        t.equals(files.files.length, 3, ' 3 files retrieved');
        t.equals(files.dom_url.host, 'static.izs.me', 'host detection');
        if (files.length() > 0){

            t.ok(/\.txt$/.test(files.files[0].file), 'FIRST FILE ends in .txt');

            var the_file = files.files[0];
            var test_url = DOMAIN_STATIC_IS_ME + '/' + the_file.file;
            var local_file = path.resolve(COM_NOOGLE_ROOT, 'chat_files', 'static.izs.me', the_file.file);
            t.equals(files.files[0].local_copy(), local_file, 'local file = ' + local_file);
            t.equals(files.file_url(0), test_url, 'url forming = ' +  test_url);
            t.end();
        } else {
            t.end();
        }
    }, 3)
});


tap.test('importing data', function(t){

    write_chat.files_at_domain(DOMAIN_NODEJS_DEBUGGABLE_COM, function(err, files){
        if (err){
             console.log(util.inspect(err));
            t.end();
            return;
        }
        console.log('files: %s', util.inspect(files));
        t.equals(files.files.length, 3, '3 files retrieved');
        t.equals(files.dom_url.host, 'nodejs.debuggable.com', 'host detection');
        if (files.length() > 0){
            wrench.rmdirSyncRecursive(CHAT_FILE_DIR, function(err){
                if (err){
                    console.log('error removing file: %s', err.message);
                    t.end();
                }
            });
            t.ok(!fs.existsSync(CHAT_FILE_DIR), 'chat_file directory erased');
            if (fs.existsSync(CHAT_FILE_DIR)){
                console.log('chat dir has NOT been erased - terminating early');
                return t.end();
            }
            t.ok(!fs.existsSync(files.files[0].local_copy()), 'local file has not been created yet');

            var once = false;
            files.files[0].import(function(err){
                if (once){
                    console.log('redux!!!!!!!');
                    return;
                }
                once = true;

                console.log('import has returned');
                if (err){
                    console.log('cannot import ' + files.files[0].file);
                    return t.end();
                }
                var lc = files.files[0].local_copy();
                console.log('RESULT OF IMPORT %s', lc);
                t.ok(fs.existsSync(CHAT_FILE_DIR), 'chat dir ' + CHAT_FILE_DIR + ' created');
                t.ok(fs.existsSync(lc), 'local file ' + lc + ' created');
                t.end();
            })
        } else {
            console.log("NO FILES - not doing final tests")
            t.end();
        }
    }, 3)
});

tap.test('large import', function(t){

    write_chat.files_at_domain(DOMAIN_STATIC_IS_ME, function(err, files){
        if (err){
             console.log(util.inspect(err));
            t.end();
            return;
        }

        var file_dir = path.resolve(CHAT_FILE_DIR, 'static.izs.me')

        console.log('files: %s', files.length()); // no way of knowing how many files that is
        t.equals(files.dom_url.host, 'static.izs.me', 'host static.izs.me detection');
        if (files.length() > 0){
            wrench.rmdirSyncRecursive(file_dir);
            t.ok(!fs.existsSync(file_dir), 'file directory ' + file_dir + ' erased');
            if (fs.existsSync(file_dir)){
                console.log('file dir has NOT been erased - terminating early');
                return t.end();
            }
            t.ok(!fs.existsSync(files.files[0].local_copy()), 'local file has not been created yet');

            var once = false;
            files.import_all(function(err, status){
                if (err){
                    console.log('import failed');
                    t.fail();
                    t.end();
                    return;
                }
                t.end();
            });

        } else {
            console.log("NO FILES - not doing final tests")
            t.end();
        }
    }, 30);
});

tap.test('large import 2', function(t){

    write_chat.files_at_domain(DOMAIN_NODEJS_DEBUGGABLE_COM, function(err, files){
        if (err){
             console.log(util.inspect(err));
            t.end();
            return;
        }

        var file_dir = path.resolve(CHAT_FILE_DIR, 'nodejs.debuggable.com');

        console.log('files: %s', files.length()); // no way of knowing how many files that is
        t.equals(files.dom_url.host, 'nodejs.debuggable.com', 'host nodejs.debuggable.com detection');
        if (files.length() > 0){
            wrench.rmdirSyncRecursive(file_dir);
            t.ok(!fs.existsSync(file_dir), 'file directory ' + file_dir + ' erased');
            if (fs.existsSync(file_dir)){
                console.log('file dir has NOT been erased - terminating early');
                return t.end();
            }
            t.ok(!fs.existsSync(files.files[0].local_copy()), 'local file has not been created yet');

            var once = false;
            files.import_all(function(err, status){
                if (err){
                    console.log('import failed');
                    t.fail();
                    t.end();
                    return;
                }
                t.end();
            });

        } else {
            console.log("NO FILES - not doing final tests")
            t.end();
        }
    }, 30);
});