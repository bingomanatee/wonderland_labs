var http = require('http');
var child_process = require('child_process');
var path = require('path');
var util = require('util');
var _ = require('underscore');
var querystring = require('querystring');
var _DEBUG = false;

var ELASTIC_ROOT = path.resolve(__dirname, '../../vendor/elasticsearch-0.19.9/bin')
var INDEX = {
    message:{
        settings:{
            number_of_shards:4
        },
        properties:{
            username:{
                type:'string',
                store:'yes'
            },
            relevancy:{
                type:'string',
                store:'yes'
            },
            message:{
                type:'string',
                store:'yes'
            },
            date:{
                type:'string',
                store:'yes'
            },
            time:{
                type:'number',
                store:'yes'
            },
            minute:{
                type:'number',
                store:'yes'
            },
            line:{
                type:'number',
                store:'yes'
            },
            source:{
                type:'string',
                store:'yes'
            },
            relevancy:{
                type:'number',
                store:'yes'
            }
        },

        _boost:{
            "name":"relevancy",
            "null_value":0
        }
    }


}

var PORT = 9200;
var HOST = 'localhost';
var PATH_PREFIX = '/noogle/message/';

function _id(date, line) {
    return util.format('%sL%s', date, line);
}

function _options(props) {

    if (!props.method) {
        throw new Error('options %s has no method', util.inspect(props));
    }
    if (!props.id) {
        if (props.date && props.line) {
            props.id = _id(props.date, props.line);
            delete props.date;
            delete props.line;
        }
    }

    if (props.id) {
        props.path = PATH_PREFIX + props.id;
        delete props.id;
    }


    return _.defaults(props, {
        host:HOST,
        port:PORT
    });
}

function _request(opts, cb, data) {

    var out = '';
    var error = false;
    var sent = false;

    function _cb(err) {
        if (err) {
            error = err;
        }
        if (sent) {
            return;
        }
        sent = true;

        if (_DEBUG)     console.log(' >>>>> result of %s: %s', options.path, ((data) ? JSON.stringify(data) : '') ,  out);

        cb(error, out);
    }

    var options = _options(opts);
    if (_DEBUG) console.log('_request with options %s', util.inspect(options));
    try {
        var req = http.request(options, function (res) {
            // console.log('STATUS: ' + res.statusCode);
            // console.log('HEADERS: ' + JSON.stringify(res.headers));
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                // if (_DEBUG)  console.log('BODY: ' + chunk);
                out += chunk;
            });
            res.on('error', function (err) {
                if (_DEBUG)      console.log('response error: %s', err.message);
                _cb(err);
            })
            res.on('end', function () {
                _cb();
            })
            res.on('close', function () {
                _cb();
            })
        });

        req.on('error', function (e) {
            console.log('request error: %s', e.message);
            _cb(e);
        });

        req.on('end', function () {
            if (_DEBUG)         console.log('request ended');
        })
        req.on('close', function () {
            if (_DEBUG)        console.log('request ended');
        })

        if (data) {
            var sd = JSON.stringify(data);
            if (_DEBUG)       console.log('writing data %s', sd);
            req.write(sd);
        }
        req.end();
    } catch (re) {
        console.log('caught %s', re.message);
        _cb(re);

    }
}

module.exports = {

    init:function (cb) {
        var err = null;
        var out = '';
       var cp = child_process.spawn(ELASTIC_ROOT);
        cp.stdout.on('data', function(data){
           if (_DEBUG) console.log('init data: %s', data);
            out += data.toString();
        })
        cp.stderr.on('data', function(msg){
            if (_DEBUG)    console.log('error: %s', msg);
            err = msg;
        })
        cp.on('exit', function(){
            if (_DEBUG)  console.log('exiting with %s <<<<<<', out);
            cb(err, out);
        })
    },

    define_index:function (cb) {
        _request({ method:'PUT', path:'/noogle' }, cb, INDEX);
    },

    delete_all:function (cb) {
        _request({method:'DELETE', path:'/noogle'}, cb);

    },

    search:function (query, cb, start, size) {
        if (!start){
            start = 0;
        }
        if (!size){
            size = 500;
        }
        _request({
                method:'POST',
                'content_type':'application/text',
                path:'/noogle/message/_search?pretty=true'
            }, cb,
            {
                from: start,
                size: size,
                query: {
                    query_string: {"query": query}
                }
            }
        );
    },

    status:function (cb) {
        _request({method:'GET', path:'/noogle/_status'}, cb);
    },

    message:function (message, cb) {

        var options = {
            method:'PUT',
            date:message.date,
            line:message.line
        }
        _request(options, cb, message);
    }
}