var http = require('http');
var child_process = require('child_process');
var path = require('path');
var util = require('util');
var _ = require('underscore');
var querystring = require('querystring');
var fs = require('fs');
var elastic = require('./index');


module.exports = {

    /**
     * note -- callback is called MULTIIPLE TIMES
     * as the file is read. Once the file is done it is passed 'end';
     * @param file_path
     * @param regex
     * @param cb
     * @param limit
     */
    parse_file: function (file_path, regex, cb, limit){

        var last_fragment = '';
       var count = 0;
        var ended = false;
        var fails = 0;

       if (limit){
           console.log('reading up to %s lines of %s', limit, file_path);
       } else {
           console.log('reading lines of %s', file_path);
       }

        fs.exists(file_path, function(e){
            if (!e){
                return cb(new Error('cannot open' + file_path));
            }

            var read_stream = fs.createReadStream(file_path, {encoding: 'utf8'});


            read_stream.on('data', function(content){
                if (ended){
                    return;
                }

               // console.log('data: %s', content.substr(0, 50) + '...');

                var lines = content.split("\n");
              //  console.log('%s lines', lines.length);

                if (last_fragment){
                    lines[0] = last_fragment + lines[0];
                }
                last_fragment = lines.length > 1 ? lines.pop() : '';

                do {

                    if (count > limit){
                        ended = true;
                        cb(null, 'end');
                        read_stream.destroy();
                        break;
                        return;
                    }
                    var line = lines.shift();

                 //   console.log('analyzing line %s; lines left: %s', line, lines.length);
                    ++count;
                    var match = regex.exec(line);
                    if (match){
                        cb (null, match, count);
                    //    console.log('line %s: found %s on %s', count, match[2], match[1]);
                    } else {
                        ++fails;
                    //    console.log('failure: %s', line);
                      /*  if (fails > 10){
                            ended = true;
                            cb(new Error('too many fails'));
                            read_stream.destroy();
                        } */
                    }
                    if (limit && (count > limit)){
                        ended = true;
                        cb(null, 'end');
                        read_stream.destroy();
                    }
                } while (lines.length > 0);

            });

            read_stream.on('error', function(err){
                console.log('error reading ' + file_path + ': ', + util.inspect(err));
                cb(err);
            } );

            read_stream.on('end', function(){
                cb(null, 'end', count, fails);
             //   console.log('done reading file');
            })

            read_stream.on('close', function(){
                cb(null, 'end');
               // console.log('done reading file');
            })
        })
    }

}