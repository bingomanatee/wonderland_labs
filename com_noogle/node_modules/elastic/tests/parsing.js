var tap = require('tap');
var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var request = require('request');
var path = require('path');
var COM_NOOGLE_ROOT = path.resolve(__dirname, '../../../');
var wrench = require('wrench');

var elastic = require('./../index');
var parsing = require('./../parsing');
var LINE_LIMIT = 5;

tap.test('parsing, limited', function (t) {
    var src_path = path.resolve(__dirname, 'sample_njs/2012-01-06.txt');
    var regex = /\[([^\]]+)\] ([\w]+): (.*)/;

    var lines = [];
    var p2 = false;
    parsing.parse_file(src_path, regex, function (err, line) {
        if (p2) {
            return;
        }
        if (err) {
            console.log('error: %s', err.message);
            t.fail(err.message);
            t.end();
        } else if (line == 'end') {
            if (!p2) {
                p2 = true;
                _phase_2();
            }
        } else {
            lines.push(line);
        }
    }, LINE_LIMIT);

    function _phase_2() {
        t.equals(lines.length, LINE_LIMIT, 'lines found count = ' + LINE_LIMIT);
        t.end();
    }
}, {timeout:100000});


tap.test('parsing, full', function (t) {
    var src_path = path.resolve(__dirname, 'sample_njs/2012-01-06.txt');
    var regex = /\[([^\]]+)\] ([\w]+): (.*)/;

    var lines = [];
    var p2 = false;
    parsing.parse_file(src_path, regex, function (err, line) {
        if (p2) {
            return;
        }
        if (err) {
            console.log('error: %s', err.message);
            t.fail(err.message);
            p2 = true;
            t.end();
        } else if (line == 'end') {
            if (!p2) {
                p2 = true;
                _phase_2();
            }
        } else {
            lines.push(line);
        }
    });

    function _phase_2() {
        t.ok(lines.length > 50, 'lines found count = ' + lines.length);
        t.end();
    }
}, {timeout:100000});

tap.test('parsing and submitting', function (t) {
        var src_path = path.resolve(__dirname, 'sample_njs/2012-01-06.txt');
        var regex = /\[([^\]]+)\] ([\w]+): (.*)/;
        var LINE_LIMIT = 20;

        var lines = 0;
        var p2 = false;
        parsing.parse_file(src_path, regex, function (err, line) {
            if (p2) {
                console.log('NOT reading %s', line);
                return;
            }
            if (err) {
                console.log('error: %s', err.message);
                t.fail(err.message);
                p2 = true;
                t.end();
            } else if (line == 'end') {
                if (!p2) {
                    p2 = true;
                    _phase_2();
                }
            } else {
                var time = line[1];
                var hm = time.split(':');
                var hour = parseInt(hm[0]);
                var minute = parseInt(hm[1]);
                var l = ++lines;
                console.log(' RECIEVED LINE %s', lines);

                elastic.message({
                        date:'2012-01-06',
                        minute:(hour * 60) + minute,
                        line:l,
                        username:line[2],
                        message:line[3]
                    },
                    function (err, content) {
                        console.log('content: %s', content);
                    }
                )
            }
        }, LINE_LIMIT);

        function _phase_2() {
            t.ok(lines <= LINE_LIMIT, 'lines parsed count ' + lines + ' <= ' + LINE_LIMIT);
            setTimeout(_phase_3, 1000);
        }

        function _phase_3() {
            elastic.search('isaacs', function (err, content) {
                try {
                    var j = JSON.parse(content);
                } catch (e) {
                    console.log('error parsing JSON: %s', e.message);
                    t.end();
                    return;
                }

                t.equal(j.hits.total, 13, 'thirteen isaacs');
                t.end();
            })
        }
    },
    {
        timeout:100000
    }
);