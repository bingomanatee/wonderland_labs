var tap = require('tap');
var elastic = require('./../index');
var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var request = require('request');
var path = require('path');
var COM_NOOGLE_ROOT = path.resolve(__dirname, '../../../');
var wrench = require('wrench');

/**
 * note this test DELETES EVERYTHING in the repo - only run it BEFORE you have precious data!
 */

tap.test('status', function (t) {

    function _phase_2() {


        elastic.delete_all(function (err, content) {
            console.log('resetting db: content = %s', content);
            try {
                var content_json = JSON.parse(content);
            } catch (err) {
                console.log('delete error: %s', err.message);
                t.end();
                return;
            }

            console.log('content_json: %s', util.inspect(content_json));

            t.equal(content_json.ok, true, 'delete status is ok');
            t.ok(content_json.acknowledged, 'delete acknowledged');


            _phase_3();
        })
    }

    function _phase_3(){

        elastic.message({username:'bob', message:'I love node',
            date:'2011-11-01', minute:30 + 60 * 4, line:100,
            source:'http://nodeircbackups.com/node.js/2011-11-01.txt'},
            function(err, response){
                if (err){
                    console.log('message insert error: %s', err.message);
                    return t.end();
                }
                console.log('message insert: %s', response);
                try {
                    var json_content = JSON.parse(response);
                } catch(err){
                    console.log('error with content %s', response);
                    return t.end();
                }

                t.ok(json_content.ok, 'is ok');
                t.equal(json_content._id, '2011-11-01L100', 'id of message');

                setTimeout(function(){

                    var q  = 'username:bob'
                    elastic.search(q, function(err, found){
                         console.log('found: %s', found);

                        t.end();
                    });

                }, 1000);
            }
        );
    }

    elastic.status(function (err, content) {
        console.log('status content: %s, error: %s', content, err ? err.message : '');
        if (err) {
            if (err.message == 'connect ECONNREFUSED') {
                elastic.init(function (e2, c2) {
                    console.log('init response: %s, error: %s', c2, e2 ? e2.message : '');
                    t.end();
                })
            }
        } else if (/IndexMissingException/.test(content)) {
            console.log(' .... REINDEXING .....')
            elastic.define_index(function (e3, c3) {
                console.log('REINDEX response: %s, error: %s', c3, e3 ? e3.message : '');

                _phase_2();
            });
        } else {
            try {
                var content_json = JSON.parse(content);
            } catch (je) {
                console.log('status content error: %s', je.message);
                t.end();
                return;
            }
            t.equal(content_json.ok, true, 'status is ok');
            t.ok(content_json.indices, 'has indices');
            t.ok(content_json.indices.hasOwnProperty('noogle'), 'has a noogle index');

            _phase_2();
        }

    })
})