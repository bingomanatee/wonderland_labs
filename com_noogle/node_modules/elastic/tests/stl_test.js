var tap = require('tap');
var _ = require('underscore');
var util = require('util');
var fs = require('fs');
var request = require('request');
var path = require('path');
var stl = require('./../../stream_to_lines');

var test_path = path.resolve(__dirname, 'stl_test_data.txt');

tap.test('reading a named path\'s lines', function(t){

    var numbers = [];

    function _on_line(line){
        var match = /[\d]+/.exec(line);
        if (match){
            numbers.push(parseInt(match[0]));
        }
    }

    function _on_end(){
        t.deepEqual(numbers, [99,1,98,1,97], 'first number on each line')
        t.end();
    }

    function _on_error(e){
        console.log(e);
        t.fail(e.message);
        t.end();
    }


    stl(test_path, _on_line, _on_error, _on_end);

})
tap.test('reading a named path\'s comma-seperated items', function(t){

    var numbers = [];

    function _on_line(line){
        var match = /[\d]+/.exec(line);
        if (match){
            numbers.push(parseInt(match[0]));
        }
    }

    function _on_end(){
        t.deepEqual(numbers, [99,99,1,98,98,98,1,97,97,97, 1, 96], 'first number on each line')
        t.end();
    }

    function _on_error(e){
        console.log(e);
        t.fail(e.message);
        t.end();
    }


    stl(test_path, _on_line, _on_error, _on_end, ',');

})

tap.test('reading a bad file', function(t){

    function _on_line(line){
        t.fail(1, 'BAD FILE cannot read file that does not exist');
        t.end();
    }

    function _on_error(){
        t.ok('not a file', 'BAD FILE detects not a file');
        t.end();
    }

    function _on_end(){
        t.fail(1, 'BAD FILE on end called');

    }

    stl('not a file', _on_line, _on_error, _on_end, ',');

})
