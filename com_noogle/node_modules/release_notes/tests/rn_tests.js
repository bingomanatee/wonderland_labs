var tap = require('tap');
var rn = require('./../index');
var _DEBUG = false;
var util = require('util');
var fs = require('fs');

tap.test('regex for lines', function(t){

    var data = rn.line_data('2012.08.22, Version 0.8.8 (Stable)');
    if (_DEBUG) console.log('data 1: %s', util.inspect(data));

    t.equals(data.CLASS, 'release', 'is a release');
    t.equals(data.version, '0.8.8', 'found version');
    t.equals(data.month, 8);
    t.equals(data.version_numbers.major, 0, 'version number parsed');
    t.equals(data.version_numbers.minor, 8, 'version number parsed');
    t.equals(data.version_numbers.dot, 8, 'version number parsed');

    var data2 = rn.line_data('2012.08.15, Version 0.8.7 (Stable), f640c5d35cba96634cd8176a525a1d876e361a61');

    t.equals(data2.CLASS, 'release', 'is a release');
    t.equals(data2.version, '0.8.7', 'found version');
    t.equals(data2.version_numbers.major, 0, 'version number parsed');
    t.equals(data2.version_numbers.minor, 8, 'version number parsed');
    t.equals(data2.version_numbers.dot, 7, 'version number parsed');

    var bullet = rn.line_data('* unix: Fix llvm and older gcc duplicate symbol warnings (Bert Belder)');

    t.equals(bullet.CLASS,'bullet', 'is a bullet');
    t.equals(bullet.subject, 'unix', 'subject is unix');
    t.equals(bullet.notes, 'Fix llvm and older gcc duplicate symbol warnings (Bert Belder)', 'bullet sbject' )

    t.end();

    var non = rn.line_data('     ');
    t.equals(non, false, 'scrap line detected');

})

tap.test('whole cloth parse', function(t){

    rn.read_config(function(err, releases){
        console.log(util.inspect(err));
        console.log(util.inspect(releases));

        var data = releases.releases[0].release;

        console.log('release data: %s', util.inspect(data));

        t.equals(data.version, '0.8.8', 'found version');
        t.equals(data.month, 8);
        t.equals(data.version_numbers.major, 0, 'version number parsed');
        t.equals(data.version_numbers.minor, 8, 'version number parsed');
        t.equals(data.version_numbers.dot, 8, 'version number parsed');

        fs.writeFile(__dirname + '/../release_notes.json', JSON.stringify(releases));

        t.end();
    })


})