var util = require('util');
var _ = require('underscore');
var gate = require('gate');
var fs = require('fs');
var path = require('path');
var _DEBUG = false;

module.exports = function(stream_or_path, on_line, on_error, on_end, divider){
       if (_.isString(stream_or_path)){
           fs.exists(stream_or_path, function(exists){
               if (exists){
                   var stream = fs.createReadStream(stream_or_path);
                   _stream_to_lines(stream, on_line, on_error, on_end, divider);
               } else {
                   on_error('cannot find file '+ stream_or_path);
                   return;
               }
           })
       } else {
           _stream_to_lines(stream_or_path, on_line, on_error, on_end, divider);
       }

}

function _stream_to_lines(stream, on_line, on_error, on_end, divider){
   if (_DEBUG) console.log('reading stream %s', util.inspect(stream))

    if (!_.isFunction(on_line)){
        throw new Error(util.format('on_line is %s, should be a function', on_line));
    }

    if (!_.isFunction(on_error)){
        throw new Error(util.format('on_error is %s, should be a function', on_error));
    }

    if (!_.isFunction(on_end)){
        throw new Error(util.format('on_end is %s, should be a function', on_end));
    }


    var last_line = '';
    var line_count = 0;

    if (!divider){
        divider = /[\n\r]+/g;
    }

    stream.on('data', function(data){
        data = data.toString('utf8');
       if (_DEBUG)  console.log('reading data %s', data.substr(0,20) + '...');

        var lines = data.split(divider);

        if (last_line){
            lines[0] = lines[0] ? last_line + lines[0] : last_line;
        }
        last_line = lines.pop();
        lines.forEach(function(line){
            on_line(line, line_count);
            ++line_count;
        })
    })

    stream.on('error', on_error);
    stream.on('end', on_end);

}